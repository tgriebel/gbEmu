//////////////////////////////////////////////////////////////////////////////////
//																				//
// WARNING: THIS FILE IS MEANT TO BE USED AS A PLAIN-TEXT PREPROCESSOR INCLUDE	//
//																				//
//////////////////////////////////////////////////////////////////////////////////

OP_DEF( NOP ) {}

OP_DEF( ILL ) {
	assert( 0 );
}

OP_DEF( LD ) {
	uint16_t value;
	Load<RHS>( o, value );
	Store<LHS>( o, value );
}

OP_DEF( LD_INC ) {
	uint16_t value;
	Load<RHS>( o, value );
	Store<LHS>( o, value );
	HL++;
}

OP_DEF( LD_DEC ) {
	uint16_t value;
	Load<RHS>( o, value );
	Store<LHS>( o, value );
	HL--;
}

OP_DEF( LDI ) {
	u8i8 value;
	value.u8 = o.op0;
	HL = SP + value.i8;
}

OP_DEF( HALT ) {

}

OP_DEF( STOP ) {

}

OP_DEF( ADD ) {
	uint16_t lhsValue, rhsValue;
	Load<RHS>( o, lhsValue );
	Load<LHS>( o, rhsValue );

	const uint16_t result = lhsValue + rhsValue;
	Store<LHS>( o, result );

	SetAluFlags( result );
}

OP_DEF( ADD_HL ) {
}

OP_DEF( ADC ) {

}

OP_DEF( SUB ) {

}

OP_DEF( SBC ) {

}

OP_DEF( AND ) {

}

OP_DEF( XOR ) {
	uint16_t lhsValue, rhsValue;
	Load<RHS>( o, lhsValue );
	Load<LHS>( o, rhsValue );
	const uint16_t result = lhsValue ^ rhsValue;
	Store<LHS>( o, result );

	z = CheckZero( result );
}

OP_DEF( OR ) {

}

OP_DEF( CP ) {

}

OP_DEF( INC ) {

}

OP_DEF( DEC ) {

}

OP_DEF( RLCA ) {

}

OP_DEF( RRCA ) {

}

OP_DEF( RRA ) {

}

OP_DEF( RLA ) {

}

OP_DEF( RST ) {

}

OP_DEF( RET ) {

}

OP_DEF( RETI ) {

}

OP_DEF( JR ) {
	if ( ( fh & BIT ) == CHK ) {

	}
}

OP_DEF( JP ) {
	if ( ( fh & BIT ) == CHK ) {

	}
}

OP_DEF( DAA ) {

}

OP_DEF( SCF ) {

}

OP_DEF( CPL ) {

}

OP_DEF( DI ) {

}

OP_DEF( EI ) {

}

OP_DEF( CCF ) {

}

OP_DEF( POP ) {

}

OP_DEF( PUSH ) {

}

OP_DEF( CALL ) {
	if ( ( fl & BIT ) == CHK ) {

	}
}

OP_DEF( BIT ) {
}

OP_DEF( RLC ) {
}

OP_DEF( RRC ) {
}

OP_DEF( RL ) {
}

OP_DEF( RR ) {
}

OP_DEF( SLA ) {
	uint16_t value;
	Load<RHS>( o, value );
	uint8_t bit7 = value & 0x80;
	value <<= 1;
	Store<LHS>( o, value & 0xFE );
}

OP_DEF( SRA ) {
}

OP_DEF( SWAP ) {
	uint16_t value;
	Load<RHS>( o, value );
	value = ( ( value << 4 ) & 0xF0 ) | ( ( value >> 4 ) & 0x0F );
	Store<LHS>( o, value );
}

OP_DEF( SRL ) {
}

OP_DEF( RES ) {
	uint16_t value;
	Load<LHS>( o, value );
	value &= ~( 1 << BIT );
	Store<RHS>( o, value );
}

OP_DEF( SET ) {
	uint16_t value;
	Load<LHS>( o, value );
	value |= ( 1 << BIT );
	Store<RHS>( o, value );
}

void BuildOpLUT()
{
	// Misc/control instructions
	OP_ADDR( 0x00, NOP,		NONE,	NONE,	0, 1 )
	OP_ADDR( 0x10, STOP,	NONE,	NONE,	1, 1 )
	OP_ADDR( 0x76, HALT,	NONE,	NONE,	0, 2 )
	OP_ADDR( 0xF3, DI,		NONE,	NONE,	0, 1 )
	OP_ADDR( 0xFB, EI,		A,		IM_16_A, 2, 4 )

	// Illegal
	OP_ADDR( 0xCB, ILL,		NONE,	NONE,	0, 0 )	
	OP_ADDR( 0xD3, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xDB, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xDD, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xE3, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xE4, ILL,		NONE,	NONE,	0, 0 )	
	OP_ADDR( 0xEB, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xEC, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xED, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xF4, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xFC, ILL,		NONE,	NONE,	0, 0 )
	OP_ADDR( 0xFD, ILL,		NONE,	NONE,	0, 0 )

	// Jump/call instructions
	OP_JUMP( 0x18, JR,		IM_8,	2, 3, STATUS_NONE, 0 )
	OP_JUMP( 0x20, JR,		IM_8,	1, 2, STATUS_ZERO, 0 )
	OP_JUMP( 0x28, JR,		IM_8,	2, 2, STATUS_ZERO, 1 )
	OP_JUMP( 0x30, JR,		IM_8,	1, 2, STATUS_CARRY, 0 )
	OP_JUMP( 0x38, JR,		IM_8,	2, 2, STATUS_CARRY, 1 )
	OP_ADDR( 0xC2, JP,		PC,		IM_16,	2, 3 )
	OP_ADDR( 0xC3, JP,		PC,		IM_16,	0, 4 )
	OP_ADDR( 0xCA, JP,		PC,		IM_16,	2, 3 )
	OP_ADDR( 0xD2, JP,		PC,		IM_16,	2, 3 )
	OP_ADDR( 0xDA, JP,		PC,		IM_16,	2, 3 )
	OP_ADDR( 0xE9, JP,		NONE,	HL,		0, 1 )
	OP_JUMP( 0xC4, CALL,	IM_16,	0, 3, 0, 0 )
	OP_JUMP( 0xCC, CALL,	IM_16,	2, 3, 0, 0 )
	OP_JUMP( 0xCD, CALL,	IM_16,	2, 6, 0, 0 )
	OP_JUMP( 0xD4, CALL,	IM_16,	0, 3, 0, 0 )
	OP_JUMP( 0xDC, CALL,	IM_16,	2, 3, 0, 0 )
	OP_ADDR( 0xC0, RET,		NONE,	NONE,	0, 2 )
	OP_ADDR( 0xC8, RET,		NONE,	NONE,	0, 2 )
	OP_ADDR( 0xC9, RET,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0xD0, RET,		NONE,	NONE,	0, 2 )
	OP_ADDR( 0xD8, RET,		NONE,	NONE,	0, 2 )
	OP_ADDR( 0xD9, RETI,	NONE,	NONE,	0, 4 )
	OP_ADDR( 0xC7, RST,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0xCF, RST,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0xD7, RST,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0xDF, RST,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0xE7, RST,		A,		IM_8,	0, 4 )
	OP_ADDR( 0xEF, RST,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0xF7, RST,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0xFF, RST,		NONE,	NONE,	0, 4 )
	
	// 8bit load/store/move instructions
	OP_ADDR( 0x02, LD,		BC_A,	A,		0, 2 )
	OP_ADDR( 0x06, LD,		B,		IM_8,	1, 2 )
	OP_ADDR( 0x0A, LD,		A,		BC_A,	0, 2 )
	OP_ADDR( 0x0E, LD,		C,		IM_8,	1, 2 )
	OP_ADDR( 0x12, LD,		DE_A,	A,		0, 2 )
	OP_ADDR( 0x16, LD,		D,		IM_8,	1, 2 )
	OP_ADDR( 0x1A, LD,		A,		DE_A,	0, 2 )
	OP_ADDR( 0x1E, LD,		E,		IM_8,	1, 2 )
	OP_ADDR( 0x22, LD_INC,	HL,		A,		0, 2 )
	OP_ADDR( 0x26, LD,		H,		IM_8,	1, 2 )
	OP_ADDR( 0x2A, LD_INC,	A,		HL,		0, 2 )
	OP_ADDR( 0x2E, LD,		L,		IM_8,	1, 2 )
	OP_ADDR( 0x32, LD_DEC,	HL,		A,		0, 2 )
	OP_ADDR( 0x36, LD,		HL_A,	IM_8,	1, 3 )
	OP_ADDR( 0x3A, LD_DEC,	A,		HL,		0, 2 )
	OP_ADDR( 0x3E, LD,		A,		IM_8,	1, 2 )	
	OP_ADDR( 0x40, LD,		B,		B,		0, 1 )
	OP_ADDR( 0x41, LD,		B,		C,		0, 1 )
	OP_ADDR( 0x42, LD,		B,		D,		0, 1 )
	OP_ADDR( 0x43, LD,		B,		E,		0, 1 )
	OP_ADDR( 0x44, LD,		B,		H,		0, 1 )
	OP_ADDR( 0x45, LD,		B,		L,		0, 1 )
	OP_ADDR( 0x46, LD,		B,		HL_A,	0, 2 )
	OP_ADDR( 0x47, LD,		B,		A,		0, 1 )
	OP_ADDR( 0x48, LD,		C,		B,		0, 1 )
	OP_ADDR( 0x49, LD,		C,		C,		0, 1 )
	OP_ADDR( 0x4A, LD,		C,		D,		0, 1 )
	OP_ADDR( 0x4B, LD,		C,		E,		0, 1 )
	OP_ADDR( 0x4C, LD,		C,		H,		0, 1 )
	OP_ADDR( 0x4D, LD,		C,		L,		0, 1 )
	OP_ADDR( 0x4E, LD,		C,		HL_A,	0, 2 )
	OP_ADDR( 0x4F, LD,		C,		A,		0, 1 )
	OP_ADDR( 0x50, LD,		D,		B,		0, 1 )
	OP_ADDR( 0x51, LD,		D,		C,		0, 1 )
	OP_ADDR( 0x52, LD,		D,		D,		0, 1 )
	OP_ADDR( 0x53, LD,		D,		E,		0, 1 )
	OP_ADDR( 0x54, LD,		D,		H,		0, 1 )
	OP_ADDR( 0x55, LD,		D,		L,		0, 1 )
	OP_ADDR( 0x56, LD,		D,		HL_A,	0, 2 )
	OP_ADDR( 0x57, LD,		D,		A,		0, 1 )
	OP_ADDR( 0x58, LD,		E,		B,		0, 1 )
	OP_ADDR( 0x59, LD,		E,		C,		0, 1 )
	OP_ADDR( 0x5A, LD,		E,		D,		0, 1 )
	OP_ADDR( 0x5B, LD,		E,		E,		0, 1 )
	OP_ADDR( 0x5C, LD,		E,		H,		0, 1 )
	OP_ADDR( 0x5D, LD,		E,		L,		0, 1 )
	OP_ADDR( 0x5E, LD,		E,		HL_A,	0, 2 )
	OP_ADDR( 0x5F, LD,		E,		A,		0, 1 )
	OP_ADDR( 0x60, LD,		H,		B,		0, 1 )
	OP_ADDR( 0x61, LD,		H,		C,		0, 1 )
	OP_ADDR( 0x62, LD,		H,		D,		0, 1 )
	OP_ADDR( 0x63, LD,		H,		E,		0, 1 )
	OP_ADDR( 0x64, LD,		H,		H,		0, 1 )
	OP_ADDR( 0x65, LD,		H,		L,		0, 1 )
	OP_ADDR( 0x66, LD,		H,		HL_A,	0, 2 )
	OP_ADDR( 0x67, LD,		H,		A,		0, 1 )
	OP_ADDR( 0x68, LD,		L,		B,		0, 1 )
	OP_ADDR( 0x69, LD,		L,		C,		0, 1 )
	OP_ADDR( 0x6A, LD,		L,		D,		0, 1 )
	OP_ADDR( 0x6B, LD,		L,		E,		0, 1 )
	OP_ADDR( 0x6C, LD,		L,		H,		0, 1 )
	OP_ADDR( 0x6D, LD,		L,		L,		0, 1 )
	OP_ADDR( 0x6E, LD,		L,		HL_A,	0, 2 )
	OP_ADDR( 0x6F, LD,		L,		A,		0, 1 )
	OP_ADDR( 0x70, LD,		HL_A,	B,		0, 1 )
	OP_ADDR( 0x71, LD,		HL_A,	C,		0, 1 )
	OP_ADDR( 0x72, LD,		HL_A,	D,		0, 1 )
	OP_ADDR( 0x73, LD,		HL_A,	E,		0, 1 )
	OP_ADDR( 0x74, LD,		HL_A,	H,		0, 1 )
	OP_ADDR( 0x75, LD,		HL_A,	L,		0, 1 )
	OP_ADDR( 0x77, LD,		HL_A,	A,		0, 1 )
	OP_ADDR( 0x78, LD,		A,		B,		0, 1 )
	OP_ADDR( 0x79, LD,		A,		C,		0, 1 )
	OP_ADDR( 0x7A, LD,		A,		D,		0, 1 )
	OP_ADDR( 0x7B, LD,		A,		E,		0, 1 )
	OP_ADDR( 0x7C, LD,		A,		H,		0, 1 )
	OP_ADDR( 0x7D, LD,		A,		L,		0, 1 )
	OP_ADDR( 0x7E, LD,		A,		HL_A,	0, 2 )
	OP_ADDR( 0x7F, LD,		A,		A,		0, 1 )
	OP_ADDR( 0xE0, LD,		IM_8_A,	A,		1, 3 )
	OP_ADDR( 0xE2, LD,		C_A,	A,		0, 2 )
	OP_ADDR( 0xEA, LD,		IM_16_A, A,		2, 4 )
	OP_ADDR( 0xF0, LD,		A,		IM_8_A,	1, 3 )
	OP_ADDR( 0xF2, LD,		A,		C_A,	0, 2 )
	OP_ADDR( 0xFA, LD,		A,		IM_16_A, 2, 4 )

	// 16bit load/store/move instructions
	OP_ADDR( 0x01, LD,		BC,		IM_16,	2, 3 )	
	OP_ADDR( 0x08, LD,		IM_16,	SP,		2, 5 )
	OP_ADDR( 0x11, LD,		DE,		IM_16,	2, 3 )
	OP_ADDR( 0x21, LD,		HL,		IM_16,	2, 3 )
	OP_ADDR( 0x31, LD,		HL,		IM_16,	2, 3 )
	OP_ADDR( 0xC1, POP,		BC,		SP,		0, 3 )
	OP_ADDR( 0xC5, PUSH,	SP,		BC,		0, 4 )
	OP_ADDR( 0xD1, POP,		DE,		SP,		0, 3 )
	OP_ADDR( 0xD5, PUSH,	SP,		DE,		0, 4 )
	OP_ADDR( 0xE1, POP,		HL,		NONE,	0, 3 )
	OP_ADDR( 0xE5, PUSH,	NONE,	HL,		0, 4 )
	OP_ADDR( 0xE8, ADD,		SP,		IM_8,	1, 4 )
	OP_ADDR( 0xF1, POP,		AF,		NONE,	0, 3 )
	OP_ADDR( 0xF5, PUSH,	NONE,	AF,		0, 4 )
	OP_ADDR( 0xF8, LDI,		NONE,	NONE,	1, 3 )
	OP_ADDR( 0xF9, LD,		SP,		HL,		0, 1 )

	// 8bit ALU instructions
	OP_ADDR( 0x04, INC,		B,		B,		0, 1 )
	OP_ADDR( 0x05, DEC,		B,		B,		0, 1 )
	OP_ADDR( 0x0C, INC,		C,		C,		0, 1 )
	OP_ADDR( 0x0D, DEC,		C,		C,		0, 1 )
	OP_ADDR( 0x14, INC,		D,		D,		0, 1 )
	OP_ADDR( 0x15, DEC,		D,		D,		0, 1 )
	OP_ADDR( 0x1C, INC,		E,		E,		0, 1 )
	OP_ADDR( 0x1D, DEC,		E,		E,		0, 1 )
	OP_ADDR( 0x24, INC,		H,		H,		0, 1 )
	OP_ADDR( 0x25, DEC,		H,		H,		0, 1 )
	OP_ADDR( 0x27, DAA,		A,		A,		0, 1 )
	OP_ADDR( 0x2C, INC,		L,		L,		0, 1 )
	OP_ADDR( 0x2D, DEC,		L,		L,		0, 1 )
	OP_ADDR( 0x2F, CPL,		A,		A,		0, 1 )
	OP_ADDR( 0x34, INC,		HL_A,	HL_A,	0, 3 )
	OP_ADDR( 0x35, DEC,		HL_A,	HL_A,	0, 3 )
	OP_ADDR( 0x37, SCF,		NONE,	NONE,	0, 1 )
	OP_ADDR( 0x3C, INC,		A,		A,		0, 1 )
	OP_ADDR( 0x3D, DEC,		A,		A,		0, 1 )
	OP_ADDR( 0x3F, CCF,		NONE,	NONE,	0, 1 )
	OP_ADDR( 0x80, ADD,		A,		B,		0, 1 )
	OP_ADDR( 0x81, ADD,		A,		C,		0, 1 )
	OP_ADDR( 0x82, ADD,		A,		D,		0, 1 )
	OP_ADDR( 0x83, ADD,		A,		E,		0, 1 )
	OP_ADDR( 0x84, ADD,		A,		H,		0, 1 )
	OP_ADDR( 0x85, ADD,		A,		L,		0, 1 )
	OP_ADDR( 0x86, ADD,		A,		HL_A,	0, 2 )
	OP_ADDR( 0x87, ADD,		A,		A,		0, 1 )
	OP_ADDR( 0x88, ADC,		A,		B,		0, 1 )
	OP_ADDR( 0x89, ADC,		A,		C,		0, 1 )
	OP_ADDR( 0x8A, ADC,		A,		D,		0, 1 )
	OP_ADDR( 0x8B, ADC,		A,		E,		0, 1 )
	OP_ADDR( 0x8C, ADC,		A,		H,		0, 1 )
	OP_ADDR( 0x8D, ADC,		A,		L,		0, 1 )
	OP_ADDR( 0x8E, ADC,		A,		HL_A,	0, 2 )
	OP_ADDR( 0x8F, ADC,		A,		A,		0, 1 )
	OP_ADDR( 0x90, SUB,		A,		B,		0, 1 )
	OP_ADDR( 0x91, SUB,		A,		C,		0, 1 )
	OP_ADDR( 0x92, SUB,		A,		D,		0, 1 )
	OP_ADDR( 0x93, SUB,		A,		E,		0, 1 )
	OP_ADDR( 0x94, SUB,		A,		H,		0, 1 )
	OP_ADDR( 0x95, SUB,		A,		L,		0, 1 )
	OP_ADDR( 0x96, SUB,		A,		HL_A,	0, 2 )
	OP_ADDR( 0x97, SUB,		A,		A,		0, 1 )
	OP_ADDR( 0x98, SBC,		A,		B,		0, 1 )
	OP_ADDR( 0x99, SBC,		A,		C,		0, 1 )
	OP_ADDR( 0x9A, SBC,		A,		D,		0, 1 )
	OP_ADDR( 0x9B, SBC,		A,		E,		0, 1 )
	OP_ADDR( 0x9C, SBC,		A,		H,		0, 1 )
	OP_ADDR( 0x9D, SBC,		A,		L,		0, 1 )
	OP_ADDR( 0x9E, SBC,		A,		HL_A,	0, 2 )
	OP_ADDR( 0x9F, SBC,		A,		A,		0, 1 )
	OP_ADDR( 0xA0, AND,		A,		B,		0, 1 )
	OP_ADDR( 0xA1, AND,		A,		C,		0, 1 )
	OP_ADDR( 0xA2, AND,		A,		D,		0, 1 )
	OP_ADDR( 0xA3, AND,		A,		E,		0, 1 )
	OP_ADDR( 0xA4, AND,		A,		H,		0, 1 )
	OP_ADDR( 0xA5, AND,		A,		L,		0, 1 )
	OP_ADDR( 0xA6, AND,		A,		HL_A,	0, 2 )
	OP_ADDR( 0xA7, AND,		A,		A,		0, 1 )
	OP_ADDR( 0xA8, XOR,		A,		B,		0, 1 )
	OP_ADDR( 0xA9, XOR,		A,		C,		0, 1 )
	OP_ADDR( 0xAA, XOR,		A,		D,		0, 1 )
	OP_ADDR( 0xAB, XOR,		A,		E,		0, 1 )
	OP_ADDR( 0xAC, XOR,		A,		H,		0, 1 )
	OP_ADDR( 0xAD, XOR,		A,		L,		0, 1 )
	OP_ADDR( 0xAE, XOR,		A,		HL_A,	0, 2 )
	OP_ADDR( 0xAF, XOR,		A,		A,		0, 1 )
	OP_ADDR( 0xB0, OR,		A,		B,		0, 1 )
	OP_ADDR( 0xB1, OR,		A,		C,		0, 1 )
	OP_ADDR( 0xB2, OR,		A,		D,		0, 1 )
	OP_ADDR( 0xB3, OR,		A,		E,		0, 1 )
	OP_ADDR( 0xB4, OR,		A,		H,		0, 1 )
	OP_ADDR( 0xB5, OR,		A,		L,		0, 1 )
	OP_ADDR( 0xB6, OR,		A,		HL_A,	0, 2 )
	OP_ADDR( 0xB7, OR,		A,		A,		0, 1 )
	OP_ADDR( 0xB8, CP,		A,		B,		0, 1 )
	OP_ADDR( 0xB9, CP,		A,		C,		0, 1 )
	OP_ADDR( 0xBA, CP,		A,		D,		0, 1 )
	OP_ADDR( 0xBB, CP,		A,		E,		0, 1 )
	OP_ADDR( 0xBC, CP,		A,		H,		0, 1 )
	OP_ADDR( 0xBD, CP,		A,		L,		0, 1 )
	OP_ADDR( 0xBE, CP,		A,		HL_A,	0, 2 )
	OP_ADDR( 0xBF, CP,		A,		A,		0, 1 )
	OP_ADDR( 0xC6, AND,		A,		IM_8,	1, 2 )
	OP_ADDR( 0xCE, ADC,		A,		IM_8,	1, 2 )
	OP_ADDR( 0xD6, SUB,		A,		IM_8,	1, 2 )
	OP_ADDR( 0xDE, SBC,		A,		IM_8,	1, 2 )
	OP_ADDR( 0xE6, AND,		A,		IM_8,	1, 2 )
	OP_ADDR( 0xEE, XOR,		A,		IM_8,	1, 2 )
	OP_ADDR( 0xF6, OR,		A,		IM_8,	1, 1 )
	OP_ADDR( 0xFE, CP,		A,		IM_8,	1, 2 )

	// 16bit ALU instructions
	OP_ADDR( 0x03, INC,		BC,		BC,		0, 2 )		
	OP_ADDR( 0x09, ADD,		HL,		BC,		0, 2 )	
	OP_ADDR( 0x0B, DEC,		BC,		BC,		0, 2 )		
	OP_ADDR( 0x13, INC,		DE,		DE,		0, 2 )
	OP_ADDR( 0x19, ADD,		HL,		DE,		0, 2 )
	OP_ADDR( 0x1B, DEC,		DE,		DE,		0, 2 )	
	OP_ADDR( 0x23, INC,		HL,		HL,		0, 2 )	
	OP_ADDR( 0x29, ADD,		HL,		HL,		0, 2 )
	OP_ADDR( 0x2B, DEC,		HL,		HL,		0, 2 )
	OP_ADDR( 0x33, INC,		SP,		SP,		0, 2 )
	OP_ADDR( 0x39, ADD,		HL,		SP,		0, 2 )
	OP_ADDR( 0x3B, DEC,		SP,		SP,		0, 2 )

	// 8bit rotations/shift instructions
	OP_ADDR( 0x07, RLCA,	A,		A,		0, 1 )
	OP_ADDR( 0x0F, RRCA,	A,		A,		0, 1 )
	OP_ADDR( 0x17, RLA,		A,		A,		0, 1 )
	OP_ADDR( 0x1F, RRA,		A,		A,		0, 1 )

	OP_BIT( 0x00, RLC,		B,		0,		2 )
	OP_BIT( 0x01, RLC,		C,		0,		2 )
	OP_BIT( 0x02, RLC,		D,		0,		2 )
	OP_BIT( 0x03, RLC,		E,		0,		2 )
	OP_BIT( 0x04, RLC,		H,		0,		2 )
	OP_BIT( 0x05, RLC,		L,		0,		2 )
	OP_BIT( 0x06, RLC,		HL_A,	0,		4 )
	OP_BIT( 0x07, RLC,		A,		0,		2 )
	OP_BIT( 0x08, RRC,		B,		0,		2 )
	OP_BIT( 0x09, RRC,		C,		0,		2 )
	OP_BIT( 0x0A, RRC,		D,		0,		2 )
	OP_BIT( 0x0B, RRC,		E,		0,		2 )
	OP_BIT( 0x0C, RRC,		H,		0,		2 )
	OP_BIT( 0x0D, RRC,		L,		0,		2 )
	OP_BIT( 0x0E, RRC,		HL_A,	0,		4 )
	OP_BIT( 0x0F, RRC,		A,		0,		2 )

	OP_BIT( 0x10, RL,		B,		0,		2 )
	OP_BIT( 0x11, RL,		C,		0,		2 )
	OP_BIT( 0x12, RL,		D,		0,		2 )
	OP_BIT( 0x13, RL,		E,		0,		2 )
	OP_BIT( 0x14, RL,		H,		0,		2 )
	OP_BIT( 0x15, RL,		L,		0,		2 )
	OP_BIT( 0x16, RL,		HL_A,	0,		4 )
	OP_BIT( 0x17, RL,		A,		0,		2 )
	OP_BIT( 0x18, RR,		B,		0,		2 )
	OP_BIT( 0x19, RR,		C,		0,		2 )
	OP_BIT( 0x1A, RR,		D,		0,		2 )
	OP_BIT( 0x1B, RR,		E,		0,		2 )
	OP_BIT( 0x1C, RR,		H,		0,		2 )
	OP_BIT( 0x1D, RR,		L,		0,		2 )
	OP_BIT( 0x1E, RR,		HL_A,	0,		4 )
	OP_BIT( 0x1F, RR,		A,		0,		2 )

	OP_BIT( 0x20, SLA,		B,		0,		2 )
	OP_BIT( 0x21, SLA,		C,		0,		2 )
	OP_BIT( 0x22, SLA,		D,		0,		2 )
	OP_BIT( 0x23, SLA,		E,		0,		2 )
	OP_BIT( 0x24, SLA,		H,		0,		2 )
	OP_BIT( 0x25, SLA,		L,		0,		2 )
	OP_BIT( 0x26, SLA,		HL_A,	0,		4 )
	OP_BIT( 0x27, SLA,		A,		0,		2 )
	OP_BIT( 0x28, SRA,		B,		0,		2 )
	OP_BIT( 0x29, SRA,		C,		0,		2 )
	OP_BIT( 0x2A, SRA,		D,		0,		2 )
	OP_BIT( 0x2B, SRA,		E,		0,		2 )
	OP_BIT( 0x2C, SRA,		H,		0,		2 )
	OP_BIT( 0x2D, SRA,		L,		0,		2 )
	OP_BIT( 0x2E, SRA,		HL_A,	0,		4 )
	OP_BIT( 0x2F, SRA,		A,		0,		2 )

	OP_BIT( 0x30, SWAP,		B,		0,		2 )
	OP_BIT( 0x31, SWAP,		C,		0,		2 )
	OP_BIT( 0x32, SWAP,		D,		0,		2 )
	OP_BIT( 0x33, SWAP,		E,		0,		2 )
	OP_BIT( 0x34, SWAP,		H,		0,		2 )
	OP_BIT( 0x35, SWAP,		L,		0,		2 )
	OP_BIT( 0x36, SWAP,		HL_A,	0,		4 )
	OP_BIT( 0x37, SWAP,		A,		0,		2 )
	OP_BIT( 0x38, SRL,		B,		0,		2 )
	OP_BIT( 0x39, SRL,		C,		0,		2 )
	OP_BIT( 0x3A, SRL,		D,		0,		2 )
	OP_BIT( 0x3B, SRL,		E,		0,		2 )
	OP_BIT( 0x3C, SRL,		H,		0,		2 )
	OP_BIT( 0x3D, SRL,		L,		0,		2 )
	OP_BIT( 0x3E, SRL,		HL_A,	0,		4 )
	OP_BIT( 0x3F, SRL,		A,		0,		2 )

	OP_BIT( 0x40, BIT,		B,		0,		2 )
	OP_BIT( 0x41, BIT,		C,		0,		2 )
	OP_BIT( 0x42, BIT,		D,		0,		2 )
	OP_BIT( 0x43, BIT,		E,		0,		2 )
	OP_BIT( 0x44, BIT,		H,		0,		2 )
	OP_BIT( 0x45, BIT,		L,		0,		2 )
	OP_BIT( 0x46, BIT,		HL_A,	0,		4 )
	OP_BIT( 0x47, BIT,		A,		0,		2 )
	OP_BIT( 0x48, BIT,		B,		1,		2 )
	OP_BIT( 0x49, BIT,		C,		1,		2 )
	OP_BIT( 0x4A, BIT,		D,		1,		2 )
	OP_BIT( 0x4B, BIT,		E,		1,		2 )
	OP_BIT( 0x4C, BIT,		H,		1,		2 )
	OP_BIT( 0x4D, BIT,		L,		1,		2 )
	OP_BIT( 0x4E, BIT,		HL_A,	1,		4 )
	OP_BIT( 0x4F, BIT,		A,		1,		2 )

	OP_BIT( 0x50, BIT,		B,		2,		2 )
	OP_BIT( 0x51, BIT,		C,		2,		2 )
	OP_BIT( 0x52, BIT,		D,		2,		2 )
	OP_BIT( 0x53, BIT,		E,		2,		2 )
	OP_BIT( 0x54, BIT,		H,		2,		2 )
	OP_BIT( 0x55, BIT,		L,		2,		2 )
	OP_BIT( 0x56, BIT,		HL_A,	2,		4 )
	OP_BIT( 0x57, BIT,		A,		2,		2 )
	OP_BIT( 0x58, BIT,		B,		3,		2 )
	OP_BIT( 0x59, BIT,		C,		3,		2 )
	OP_BIT( 0x5A, BIT,		D,		3,		2 )
	OP_BIT( 0x5B, BIT,		E,		3,		2 )
	OP_BIT( 0x5C, BIT,		H,		3,		2 )
	OP_BIT( 0x5D, BIT,		L,		3,		2 )
	OP_BIT( 0x5E, BIT,		HL_A,	3,		4 )
	OP_BIT( 0x5F, BIT,		A,		3,		2 )

	OP_BIT( 0x60, BIT,		B,		4,		2 )
	OP_BIT( 0x61, BIT,		C,		4,		2 )
	OP_BIT( 0x62, BIT,		D,		4,		2 )
	OP_BIT( 0x63, BIT,		E,		4,		2 )
	OP_BIT( 0x64, BIT,		H,		4,		2 )
	OP_BIT( 0x65, BIT,		L,		4,		2 )
	OP_BIT( 0x66, BIT,		HL_A,	4,		4 )
	OP_BIT( 0x67, BIT,		A,		4,		2 )
	OP_BIT( 0x68, BIT,		B,		5,		2 )
	OP_BIT( 0x69, BIT,		C,		5,		2 )
	OP_BIT( 0x6A, BIT,		D,		5,		2 )
	OP_BIT( 0x6B, BIT,		E,		5,		2 )
	OP_BIT( 0x6C, BIT,		H,		5,		2 )
	OP_BIT( 0x6D, BIT,		L,		5,		2 )
	OP_BIT( 0x6E, BIT,		HL_A,	5,		4 )
	OP_BIT( 0x6F, BIT,		A,		5,		2 )

	OP_BIT( 0x70, BIT,		B,		6,		2 )
	OP_BIT( 0x71, BIT,		C,		6,		2 )
	OP_BIT( 0x72, BIT,		D,		6,		2 )
	OP_BIT( 0x73, BIT,		E,		6,		2 )
	OP_BIT( 0x74, BIT,		H,		6,		2 )
	OP_BIT( 0x75, BIT,		L,		6,		2 )
	OP_BIT( 0x76, BIT,		HL_A,	6,		4 )
	OP_BIT( 0x77, BIT,		A,		6,		2 )
	OP_BIT( 0x78, BIT,		B,		7,		2 )
	OP_BIT( 0x79, BIT,		C,		7,		2 )
	OP_BIT( 0x7A, BIT,		D,		7,		2 )
	OP_BIT( 0x7B, BIT,		E,		7,		2 )
	OP_BIT( 0x7C, BIT,		H,		7,		2 )
	OP_BIT( 0x7D, BIT,		L,		7,		2 )
	OP_BIT( 0x7E, BIT,		HL_A,	7,		4 )
	OP_BIT( 0x7F, BIT,		A,		7,		2 )

	OP_BIT( 0x80, RES,		B,		0,		2 )
	OP_BIT( 0x81, RES,		C,		0,		2 )
	OP_BIT( 0x82, RES,		D,		0,		2 )
	OP_BIT( 0x83, RES,		E,		0,		2 )
	OP_BIT( 0x84, RES,		H,		0,		2 )
	OP_BIT( 0x85, RES,		L,		0,		2 )
	OP_BIT( 0x86, RES,		HL_A,	0,		4 )
	OP_BIT( 0x87, RES,		A,		0,		2 )
	OP_BIT( 0x88, RES,		B,		1,		2 )
	OP_BIT( 0x89, RES,		C,		1,		2 )
	OP_BIT( 0x8A, RES,		D,		1,		2 )
	OP_BIT( 0x8B, RES,		E,		1,		2 )
	OP_BIT( 0x8C, RES,		H,		1,		2 )
	OP_BIT( 0x8D, RES,		L,		1,		2 )
	OP_BIT( 0x8E, RES,		HL_A,	1,		4 )
	OP_BIT( 0x8F, RES,		A,		1,		2 )

	OP_BIT( 0x90, RES,		B,		2,		2 )
	OP_BIT( 0x91, RES,		C,		2,		2 )
	OP_BIT( 0x92, RES,		D,		2,		2 )
	OP_BIT( 0x93, RES,		E,		2,		2 )
	OP_BIT( 0x94, RES,		H,		2,		2 )
	OP_BIT( 0x95, RES,		L,		2,		2 )
	OP_BIT( 0x96, RES,		HL_A,	2,		4 )
	OP_BIT( 0x97, RES,		A,		2,		2 )
	OP_BIT( 0x98, RES,		B,		3,		2 )
	OP_BIT( 0x99, RES,		C,		3,		2 )
	OP_BIT( 0x9A, RES,		D,		3,		2 )
	OP_BIT( 0x9B, RES,		E,		3,		2 )
	OP_BIT( 0x9C, RES,		H,		3,		2 )
	OP_BIT( 0x9D, RES,		L,		3,		2 )
	OP_BIT( 0x9E, RES,		HL_A,	3,		4 )
	OP_BIT( 0x9F, RES,		A,		3,		2 )

	OP_BIT( 0xA0, RES,		B,		4,		2 )
	OP_BIT( 0xA1, RES,		C,		4,		2 )
	OP_BIT( 0xA2, RES,		D,		4,		2 )
	OP_BIT( 0xA3, RES,		E,		4,		2 )
	OP_BIT( 0xA4, RES,		H,		4,		2 )
	OP_BIT( 0xA5, RES,		L,		4,		2 )
	OP_BIT( 0xA6, RES,		HL_A,	4,		4 )
	OP_BIT( 0xA7, RES,		A,		4,		2 )
	OP_BIT( 0xA8, RES,		B,		5,		2 )
	OP_BIT( 0xA9, RES,		C,		5,		2 )
	OP_BIT( 0xAA, RES,		D,		5,		2 )
	OP_BIT( 0xAB, RES,		E,		5,		2 )
	OP_BIT( 0xAC, RES,		H,		5,		2 )
	OP_BIT( 0xAD, RES,		L,		5,		2 )
	OP_BIT( 0xAE, RES,		HL_A,	5,		4 )
	OP_BIT( 0xAF, RES,		A,		5,		2 )

	OP_BIT( 0xB0, RES,		B,		6,		2 )
	OP_BIT( 0xB1, RES,		C,		6,		2 )
	OP_BIT( 0xB2, RES,		D,		6,		2 )
	OP_BIT( 0xB3, RES,		E,		6,		2 )
	OP_BIT( 0xB4, RES,		H,		6,		2 )
	OP_BIT( 0xB5, RES,		L,		6,		2 )
	OP_BIT( 0xB6, RES,		HL_A,	6,		4 )
	OP_BIT( 0xB7, RES,		A,		6,		2 )
	OP_BIT( 0xB8, RES,		B,		7,		2 )
	OP_BIT( 0xB9, RES,		C,		7,		2 )
	OP_BIT( 0xBA, RES,		D,		7,		2 )
	OP_BIT( 0xBB, RES,		E,		7,		2 )
	OP_BIT( 0xBC, RES,		H,		7,		2 )
	OP_BIT( 0xBD, RES,		L,		7,		2 )
	OP_BIT( 0xBE, RES,		HL_A,	7,		4 )
	OP_BIT( 0xBF, RES,		A,		7,		2 )

	OP_BIT( 0xC0, SET,		B,		0,		2 )
	OP_BIT( 0xC1, SET,		C,		0,		2 )
	OP_BIT( 0xC2, SET,		D,		0,		2 )
	OP_BIT( 0xC3, SET,		E,		0,		2 )
	OP_BIT( 0xC4, SET,		H,		0,		2 )
	OP_BIT( 0xC5, SET,		L,		0,		2 )
	OP_BIT( 0xC6, SET,		HL_A,	0,		4 )
	OP_BIT( 0xC7, SET,		A,		0,		2 )
	OP_BIT( 0xC8, SET,		B,		1,		2 )
	OP_BIT( 0xC9, SET,		C,		1,		2 )
	OP_BIT( 0xCA, SET,		D,		1,		2 )
	OP_BIT( 0xCB, SET,		E,		1,		2 )
	OP_BIT( 0xCC, SET,		H,		1,		2 )
	OP_BIT( 0xCD, SET,		L,		1,		2 )
	OP_BIT( 0xCE, SET,		HL_A,	1,		4 )
	OP_BIT( 0xCF, SET,		A,		1,		2 )
	
	OP_BIT( 0xD0, SET,		B,		2,		2 )
	OP_BIT( 0xD1, SET,		C,		2,		2 )
	OP_BIT( 0xD2, SET,		D,		2,		2 )
	OP_BIT( 0xD3, SET,		E,		2,		2 )
	OP_BIT( 0xD4, SET,		H,		2,		2 )
	OP_BIT( 0xD5, SET,		L,		2,		2 )
	OP_BIT( 0xD6, SET,		HL_A,	2,		4 )
	OP_BIT( 0xD7, SET,		A,		2,		2 )
	OP_BIT( 0xD8, SET,		B,		3,		2 )
	OP_BIT( 0xD9, SET,		C,		3,		2 )
	OP_BIT( 0xDA, SET,		D,		3,		2 )
	OP_BIT( 0xDB, SET,		E,		3,		2 )
	OP_BIT( 0xDC, SET,		H,		3,		2 )
	OP_BIT( 0xDD, SET,		L,		3,		2 )
	OP_BIT( 0xDE, SET,		HL_A,	3,		4 )
	OP_BIT( 0xDF, SET,		A,		3,		2 )

	OP_BIT( 0xE0, SET,		B,		4,		2 )
	OP_BIT( 0xE1, SET,		C,		4,		2 )
	OP_BIT( 0xE2, SET,		D,		4,		2 )
	OP_BIT( 0xE3, SET,		E,		4,		2 )
	OP_BIT( 0xE4, SET,		H,		4,		2 )
	OP_BIT( 0xE5, SET,		L,		4,		2 )
	OP_BIT( 0xE6, SET,		HL_A,	4,		4 )
	OP_BIT( 0xE7, SET,		A,		4,		2 )
	OP_BIT( 0xE8, SET,		B,		5,		2 )
	OP_BIT( 0xE9, SET,		C,		5,		2 )
	OP_BIT( 0xEA, SET,		D,		5,		2 )
	OP_BIT( 0xEB, SET,		E,		5,		2 )
	OP_BIT( 0xEC, SET,		H,		5,		2 )
	OP_BIT( 0xED, SET,		L,		5,		2 )
	OP_BIT( 0xEE, SET,		HL_A,	5,		4 )
	OP_BIT( 0xEF, SET,		A,		5,		2 )

	OP_BIT( 0xF0, SET,		B,		6,		2 )
	OP_BIT( 0xF1, SET,		C,		6,		2 )
	OP_BIT( 0xF2, SET,		D,		6,		2 )
	OP_BIT( 0xF3, SET,		E,		6,		2 )
	OP_BIT( 0xF4, SET,		H,		6,		2 )
	OP_BIT( 0xF5, SET,		L,		6,		2 )
	OP_BIT( 0xF6, SET,		HL_A,	6,		4 )
	OP_BIT( 0xF7, SET,		A,		6,		2 )
	OP_BIT( 0xF8, SET,		B,		7,		2 )
	OP_BIT( 0xF9, SET,		C,		7,		2 )
	OP_BIT( 0xFA, SET,		D,		7,		2 )
	OP_BIT( 0xFB, SET,		E,		7,		2 )
	OP_BIT( 0xFC, SET,		H,		7,		2 )
	OP_BIT( 0xFD, SET,		L,		7,		2 )
	OP_BIT( 0xFE, SET,		HL_A,	7,		4 )
	OP_BIT( 0xFF, SET,		A,		7,		2 )
}