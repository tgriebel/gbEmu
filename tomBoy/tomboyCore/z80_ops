//////////////////////////////////////////////////////////////////////////////////
//																				//
// WARNING: THIS FILE IS MEANT TO BE USED AS A PLAIN-TEXT PREPROCESSOR INCLUDE	//
//																				//
//////////////////////////////////////////////////////////////////////////////////

OP_DEF( NOP ) {}

OP_DEF( ILL ) {
	assert( 0 );
}

OP_DEF( LD ) {
	uint16_t value;
	Load<RHS>( o, value );
	Store<LHS>( o, value );
}

OP_DEF( LD_INC ) {
	uint16_t value;
	Load<RHS>( o, value );
	Store<LHS>( o, value );
	HL++;
}

OP_DEF( LD_DEC ) {
	uint16_t value;
	Load<RHS>( o, value );
	Store<LHS>( o, value );
	HL--;
}

OP_DEF( LDI ) {
	HL = SP + u8i8( o.op0 ).i8;
}

OP_DEF( HALT ) {

}

OP_DEF( STOP ) {

}

OP_DEF( ADD ) {
	uint16_t value;
	Load<RHS>( o, value );

	A = A + value;
	SetAluFlags( A ); // TODO
}

OP_DEF( ADD_HL ) {
	uint16_t value;
	Load<RHS>( o, value );

	HL = HL + value;
	SetAluFlags( HL ); // TODO
}

OP_DEF( ADD_SP ) {
	uint16_t value;
	Load<RHS>( o, value );

	SP = SP + u8i8( (uint8_t)value ).i8;
	SetAluFlags( SP ); // TODO
}

OP_DEF( ADC ) {
	uint16_t value;
	Load<RHS>( o, value );

	A = A + value + cy;
	SetAluFlags( A ); // TODO
}

OP_DEF( SUB ) {
	uint16_t value;
	Load<RHS>( o, value );

	A = A - value;
	SetAluFlags( A ); // TODO
}

OP_DEF( SBC ) {
	uint16_t value;
	Load<RHS>( o, value );

	A = A - value - cy;
	SetAluFlags( A ); // TODO
}

OP_DEF( AND ) {
	uint16_t value;
	Load<RHS>( o, value );

	A = A & value;

	z = CheckZero( A );
	n = 0;
	hc = 1;
	cy = 0;
}

OP_DEF( XOR ) {
	uint16_t value;
	Load<RHS>( o, value );

	A = A ^ value;
	psw = CheckZero( A );
}

OP_DEF( OR ) {
	uint16_t value;
	Load<RHS>( o, value );

	A = A | value;
	psw = CheckZero( A );
}

OP_DEF( CP ) {
	uint16_t value;
	Load<RHS>( o, value );

	z = CheckZero( A - value );
	n = 1;
	//h = 0; // TODO
	cy = ( value > A ) ? 1 : 0;
}

OP_DEF( INC_R8 ) {
	uint16_t value;
	Load<RHS>( o, value );
	++value;
	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 0;
	hc = CheckCarry( value );
}

OP_DEF( INC_R16 ) {
	uint16_t value;
	Load<RHS>( o, value );
	++value;
	Store<LHS>( o, value );
}

OP_DEF( DEC_R8 ) {
	uint16_t value;
	Load<RHS>( o, value );
	--value;
	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 1;
	hc = 0; // TODO
}

OP_DEF( DEC_R16 ) {
	uint16_t value;
	Load<RHS>( o, value );
	--value;
	Store<LHS>( o, value );
}

OP_DEF( RLCA ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit7 = value & 0x80;
	value <<= 1;
	value = ( value & 0xFE ) | bit7;

	A = static_cast<uint8_t>( value );

	z = 0;
	n = 0;
	hc = 0;
	cy = bit7;
}

OP_DEF( RRCA ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit0 = value & 0x01;
	value >>= 1;
	value = ( value & 0x7F ) | ( bit0 << 7 );

	A = static_cast<uint8_t>( value );

	z = 0;
	n = 0;
	hc = 0;
	cy = bit0;
}

OP_DEF( RRA ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit0 = value & 0x01;
	value >>= 1;
	value = ( value & 0x7F ) | ( cy << 7 );

	A = static_cast<uint8_t>( value );

	z = 0;
	n = 0;
	hc = 0;
	cy = bit0;
}

OP_DEF( RLA ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit7 = value & 0x80;
	value <<= 1;
	value = ( value & 0x7F ) | cy;

	A = static_cast<uint8_t>( value );

	z = 0;
	n = 0;
	hc = 0;
	cy = bit7;
}

OP_DEF( RST ) {
	PushWord( PC );
	PC = GetRestartAddress( 0x00, BIT );
}

OP_DEF( RET ) {
	if ( ( psw & BIT ) == CHK ) {
		PC = PopWord();
		o.opCycles += 3;
	}
}

OP_DEF( RETI ) {
	if ( ( psw & BIT ) == CHK ) {
		PC = PopWord();
		ime = true;
	}
}

OP_DEF( JR ) {
	if ( ( psw & BIT ) == CHK ) {
		uint16_t value;
		Load<RHS>( o, value );
		PC += u8i8( (uint8_t)value ).i8;
		o.opCycles += 1;
	}
}

OP_DEF( JP ) {
	uint16_t value;
	Load<RHS>( o, value );
	PC = value;
}

OP_DEF( DAA ) {
	assert( 0 );
}

OP_DEF( SCF ) {
	n = 0;
	hc = 0;
	cy = 1;
}

OP_DEF( CPL ) {
	A = ~A;
	n = 1;
	hc = 1;
}

OP_DEF( DI ) {
	ime = false;
}

OP_DEF( EI ) {
	ime = true;
}

OP_DEF( CCF ) {
	cy = ~cy;
}

OP_DEF( POP ) {
	Store<LHS>( o, PopWord() );
}

OP_DEF( PUSH ) {
	uint16_t value;
	Load<RHS>( o, value );
	PushWord( value );
}

OP_DEF( CALL ) {
	if ( ( psw & BIT ) == CHK ) {
		uint16_t value;
		Load<RHS>( o, value );

		PushWord( PC + 2 );
		PC = value;
	}
}

OP_DEF( BIT ) {
	uint16_t value;
	Load<RHS>( o, value );

	z = ~( ( value >> BIT ) & 0x01 );
	n = 0;
	hc = 1;
}

OP_DEF( RL ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit7 = value & 0x80;
	value <<= 1;
	value = ( value & 0xFE ) | cy;

	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 0;
	hc = 0;
	cy = bit7;
}

OP_DEF( RLC ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit7 = value & 0x80;
	value <<= 1;
	value = ( value & 0xFE ) | bit7;

	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 0;
	hc = 0;
	cy = bit7;
}

OP_DEF( RR ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit0 = value & 0x01;
	value >>= 1;
	value = ( value & 0x7F ) | ( cy << 7 );

	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 0;
	hc = 0;
	cy = bit0;
}

OP_DEF( RRC ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit0 = value & 0x01;
	value >>= 1;
	value = ( value & 0x7F ) | ( bit0 << 7 );

	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 0;
	hc = 0;
	cy = bit0;
}

OP_DEF( SLA ) {
	uint16_t value;
	Load<RHS>( o, value );
	const uint8_t bit7 = value & 0x80;
	value = ( value << 1 ) & 0xFE;
	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 0;
	hc = 0;
	cy = bit7;
}

OP_DEF( SRA ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit0 = value & 0x01;
	const uint8_t bit7 = value & 0x80;

	value >>= 1;
	value = ( value & 0x7F ) | bit7;
	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 0;
	hc = 0;
	cy = bit0;
}

OP_DEF( SWAP ) {
	uint16_t value;
	Load<RHS>( o, value );
	value = ( ( value << 4 ) & 0xF0 ) | ( ( value >> 4 ) & 0x0F );
	Store<LHS>( o, value );

	psw = CheckZero( value );
}

OP_DEF( SRL ) {
	uint16_t value;
	Load<RHS>( o, value );

	const uint8_t bit0 = value & 0x01;
	value = ( value >> 1 ) & 0x7F;
	Store<LHS>( o, value );

	z = CheckZero( value );
	n = 0;
	hc = 0;
	cy = bit0;
}

OP_DEF( RES ) {
	uint16_t value;
	Load<LHS>( o, value );
	value &= ~( 1 << BIT );
	Store<RHS>( o, value );
}

OP_DEF( SET ) {
	uint16_t value;
	Load<LHS>( o, value );
	value |= ( 1 << BIT );
	Store<RHS>( o, value );
}

void BuildOpLUT()
{
	// Misc/control instructions
	OP_ADDR( 0x00, NOP,			NONE,	NONE,	0, 4 )
	OP_ADDR( 0x10, STOP,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0x76, HALT,		NONE,	NONE,	0, 4 )
	OP_ADDR( 0xF3, DI,			NONE,	NONE,	0, 4 )
	OP_ADDR( 0xFB, EI,			NONE,	NONE,	0, 4 )

	// Illegal instructions
	OP_ADDR( 0xCB, ILL,			NONE,	NONE,	0, 0 )	
	OP_ADDR( 0xD3, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xDB, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xDD, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xE3, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xE4, ILL,			NONE,	NONE,	0, 0 )	
	OP_ADDR( 0xEB, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xEC, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xED, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xF4, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xFC, ILL,			NONE,	NONE,	0, 0 )
	OP_ADDR( 0xFD, ILL,			NONE,	NONE,	0, 0 )

	// Jump/call instructions
	OP_JUMP( 0x18, JR,			IMMEDIATE_N8,	2, 12,		STATUS_NONE,	STATUS_NONE )
	OP_JUMP( 0x20, JR,			IMMEDIATE_N8,	1, 8,		STATUS_ZERO,	0 )
	OP_JUMP( 0x28, JR,			IMMEDIATE_N8,	2, 8,		STATUS_ZERO,	STATUS_ZERO )
	OP_JUMP( 0x30, JR,			IMMEDIATE_N8,	1, 8,		STATUS_CARRY,	0 )
	OP_JUMP( 0x38, JR,			IMMEDIATE_N8,	2, 8,		STATUS_CARRY,	STATUS_CARRY )
	OP_JUMP( 0xC2, JP,			IMMEDIATE_N16,	2, 12,		STATUS_ZERO,	0 )
	OP_JUMP( 0xC3, JP,			IMMEDIATE_N16,	2, 16,		STATUS_NONE,	0 )
	OP_JUMP( 0xCA, JP,			IMMEDIATE_N16,	2, 12,		STATUS_ZERO,	STATUS_ZERO )
	OP_JUMP( 0xD2, JP,			IMMEDIATE_N16,	2, 12,		STATUS_CARRY,	0 )
	OP_JUMP( 0xDA, JP,			IMMEDIATE_N16,	2, 12,		STATUS_CARRY,	STATUS_CARRY )
	OP_JUMP( 0xE9, JP,			HL,				0, 4,		STATUS_NONE,	0 )
	OP_JUMP( 0xC4, CALL,		IMMEDIATE_N16,	2, 12,		STATUS_ZERO,	0 )
	OP_JUMP( 0xCC, CALL,		IMMEDIATE_N16,	2, 12,		STATUS_ZERO,	STATUS_ZERO )
	OP_JUMP( 0xCD, CALL,		IMMEDIATE_N16,	2, 24,		STATUS_NONE,	0 )
	OP_JUMP( 0xD4, CALL,		IMMEDIATE_N16,	2, 12,		STATUS_CARRY,	0 )
	OP_JUMP( 0xDC, CALL,		IMMEDIATE_N16,	2, 12,		STATUS_CARRY,	STATUS_CARRY )
	OP_JUMP( 0xC0, RET,			NONE,			0, 8,		STATUS_ZERO,	0 )
	OP_JUMP( 0xC8, RET,			NONE,			0, 8,		STATUS_ZERO,	STATUS_ZERO )
	OP_JUMP( 0xC9, RET,			NONE,			0, 16,		STATUS_NONE,	0 )
	OP_JUMP( 0xD0, RET,			NONE,			0, 8,		STATUS_CARRY,	0 )
	OP_JUMP( 0xD8, RET,			NONE,			0, 8,		STATUS_CARRY,	STATUS_CARRY )
	OP_JUMP( 0xD9, RETI,		NONE,			0, 16,		STATUS_NONE,	0 )
	OP_JUMP( 0xC7, RST,			NONE,			0, 16,		0x00,			0 )
	OP_JUMP( 0xCF, RST,			NONE,			0, 16,		0x08,			0 )
	OP_JUMP( 0xD7, RST,			NONE,			0, 16,		0x10,			0 )
	OP_JUMP( 0xDF, RST,			NONE,			0, 16,		0x18,			0 )
	OP_JUMP( 0xE7, RST,			NONE,			0, 16,		0x20,			0 )
	OP_JUMP( 0xEF, RST,			NONE,			0, 16,		0x28,			0 )
	OP_JUMP( 0xF7, RST,			NONE,			0, 16,		0x30,			0 )
	OP_JUMP( 0xFF, RST,			NONE,			0, 16,		0x38,			0 )
	
	// 8bit load/store/move instructions
	OP_ADDR( 0x02, LD,			DIRECT_BC,		A,				0, 8 )
	OP_ADDR( 0x06, LD,			B,				IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0x0A, LD,			A,				DIRECT_BC,		0, 8 )
	OP_ADDR( 0x0E, LD,			C,				IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0x12, LD,			DIRECT_DE,		A,				0, 8 )
	OP_ADDR( 0x16, LD,			D,				IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0x1A, LD,			A,				DIRECT_DE,		0, 8 )
	OP_ADDR( 0x1E, LD,			E,				IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0x22, LD_INC,		HL,				A,				0, 8 )
	OP_ADDR( 0x26, LD,			H,				IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0x2A, LD_INC,		A,				HL,				0, 8 )
	OP_ADDR( 0x2E, LD,			L,				IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0x32, LD_DEC,		HL,				A,				0, 8 )
	OP_ADDR( 0x36, LD,			DIRECT_HL,		IMMEDIATE_N8,	1, 12 )
	OP_ADDR( 0x3A, LD_DEC,		A,				HL,				0, 8 )
	OP_ADDR( 0x3E, LD,			A,				IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0x40, LD,			B,				B,				0, 4 )
	OP_ADDR( 0x41, LD,			B,				C,				0, 4 )
	OP_ADDR( 0x42, LD,			B,				D,				0, 4 )
	OP_ADDR( 0x43, LD,			B,				E,				0, 4 )
	OP_ADDR( 0x44, LD,			B,				H,				0, 4 )
	OP_ADDR( 0x45, LD,			B,				L,				0, 4 )
	OP_ADDR( 0x46, LD,			B,				DIRECT_HL,		0, 8 )
	OP_ADDR( 0x47, LD,			B,				A,				0, 4 )
	OP_ADDR( 0x48, LD,			C,				B,				0, 4 )
	OP_ADDR( 0x49, LD,			C,				C,				0, 4 )
	OP_ADDR( 0x4A, LD,			C,				D,				0, 4 )
	OP_ADDR( 0x4B, LD,			C,				E,				0, 4 )
	OP_ADDR( 0x4C, LD,			C,				H,				0, 4 )
	OP_ADDR( 0x4D, LD,			C,				L,				0, 4 )
	OP_ADDR( 0x4E, LD,			C,				DIRECT_HL,		0, 8 )
	OP_ADDR( 0x4F, LD,			C,				A,				0, 4 )
	OP_ADDR( 0x50, LD,			D,				B,				0, 4 )
	OP_ADDR( 0x51, LD,			D,				C,				0, 4 )
	OP_ADDR( 0x52, LD,			D,				D,				0, 4 )
	OP_ADDR( 0x53, LD,			D,				E,				0, 4 )
	OP_ADDR( 0x54, LD,			D,				H,				0, 4 )
	OP_ADDR( 0x55, LD,			D,				L,				0, 4 )
	OP_ADDR( 0x56, LD,			D,				DIRECT_HL,		0, 8 )
	OP_ADDR( 0x57, LD,			D,				A,				0, 4 )
	OP_ADDR( 0x58, LD,			E,				B,				0, 4 )
	OP_ADDR( 0x59, LD,			E,				C,				0, 4 )
	OP_ADDR( 0x5A, LD,			E,				D,				0, 4 )
	OP_ADDR( 0x5B, LD,			E,				E,				0, 4 )
	OP_ADDR( 0x5C, LD,			E,				H,				0, 4 )
	OP_ADDR( 0x5D, LD,			E,				L,				0, 4 )
	OP_ADDR( 0x5E, LD,			E,				DIRECT_HL,		0, 8 )
	OP_ADDR( 0x5F, LD,			E,				A,				0, 4 )
	OP_ADDR( 0x60, LD,			H,				B,				0, 4 )
	OP_ADDR( 0x61, LD,			H,				C,				0, 4 )
	OP_ADDR( 0x62, LD,			H,				D,				0, 4 )
	OP_ADDR( 0x63, LD,			H,				E,				0, 4 )
	OP_ADDR( 0x64, LD,			H,				H,				0, 4 )
	OP_ADDR( 0x65, LD,			H,				L,				0, 4 )
	OP_ADDR( 0x66, LD,			H,				DIRECT_HL,		0, 8 )
	OP_ADDR( 0x67, LD,			H,				A,				0, 4 )
	OP_ADDR( 0x68, LD,			L,				B,				0, 4 )
	OP_ADDR( 0x69, LD,			L,				C,				0, 4 )
	OP_ADDR( 0x6A, LD,			L,				D,				0, 4 )
	OP_ADDR( 0x6B, LD,			L,				E,				0, 4 )
	OP_ADDR( 0x6C, LD,			L,				H,				0, 4 )
	OP_ADDR( 0x6D, LD,			L,				L,				0, 4 )
	OP_ADDR( 0x6E, LD,			L,				DIRECT_HL,		0, 8 )
	OP_ADDR( 0x6F, LD,			L,				A,				0, 4 )
	OP_ADDR( 0x70, LD,			DIRECT_HL,		B,				0, 8 )
	OP_ADDR( 0x71, LD,			DIRECT_HL,		C,				0, 8 )
	OP_ADDR( 0x72, LD,			DIRECT_HL,		D,				0, 8 )
	OP_ADDR( 0x73, LD,			DIRECT_HL,		E,				0, 8 )
	OP_ADDR( 0x74, LD,			DIRECT_HL,		H,				0, 8 )
	OP_ADDR( 0x75, LD,			DIRECT_HL,		L,				0, 8 )
	OP_ADDR( 0x77, LD,			DIRECT_HL,		A,				0, 8 )
	OP_ADDR( 0x78, LD,			A,				B,				0, 4 )
	OP_ADDR( 0x79, LD,			A,				C,				0, 4 )
	OP_ADDR( 0x7A, LD,			A,				D,				0, 4 )
	OP_ADDR( 0x7B, LD,			A,				E,				0, 4 )
	OP_ADDR( 0x7C, LD,			A,				H,				0, 4 )
	OP_ADDR( 0x7D, LD,			A,				L,				0, 4 )
	OP_ADDR( 0x7E, LD,			A,				DIRECT_HL,		0, 8 )
	OP_ADDR( 0x7F, LD,			A,				A,				0, 4 )
	OP_ADDR( 0xE0, LD,			DIRECT_N8,		A,				1, 4 )
	OP_ADDR( 0xE2, LD,			DIRECT_C,		A,				0, 4 )
	OP_ADDR( 0xEA, LD,			DIRECT_N16,		A,				2, 4 )
	OP_ADDR( 0xF0, LD,			A,				DIRECT_N8,		1, 4 )
	OP_ADDR( 0xF2, LD,			A,				DIRECT_C,		0, 4 )
	OP_ADDR( 0xFA, LD,			A,				DIRECT_N16,		2, 4 )

	// 16bit load/store/move instructions
	OP_ADDR( 0x01, LD,			BC,				IMMEDIATE_N16,	2, 12 )
	OP_ADDR( 0x08, LD,			IMMEDIATE_N16,	SP,				2, 20 )
	OP_ADDR( 0x11, LD,			DE,				IMMEDIATE_N16,	2, 12 )
	OP_ADDR( 0x21, LD,			HL,				IMMEDIATE_N16,	2, 12 )
	OP_ADDR( 0x31, LD,			HL,				IMMEDIATE_N16,	2, 12 )
	OP_ADDR( 0xC1, POP,			BC,				NONE,			0, 12 )
	OP_ADDR( 0xC5, PUSH,		NONE,			BC,				0, 16 )
	OP_ADDR( 0xD1, POP,			DE,				SP,				0, 12 )
	OP_ADDR( 0xD5, PUSH,		NONE,			DE,				0, 16 )
	OP_ADDR( 0xE1, POP,			HL,				NONE,			0, 12 )
	OP_ADDR( 0xE5, PUSH,		NONE,			HL,				0, 16 )
	OP_ADDR( 0xF1, POP,			AF,				NONE,			0, 12 )
	OP_ADDR( 0xF5, PUSH,		NONE,			AF,				0, 16 )
	OP_ADDR( 0xF8, LDI,			NONE,			NONE,			1, 12 )
	OP_ADDR( 0xF9, LD,			SP,				HL,				0, 12 )

	// 8bit ALU instructions
	OP_ADDR( 0x04, INC_R8,		B,				B,				0, 4 )
	OP_ADDR( 0x05, DEC_R8,		B,				B,				0, 4 )
	OP_ADDR( 0x0C, INC_R8,		C,				C,				0, 4 )
	OP_ADDR( 0x0D, DEC_R8,		C,				C,				0, 4 )
	OP_ADDR( 0x14, INC_R8,		D,				D,				0, 4 )
	OP_ADDR( 0x15, DEC_R8,		D,				D,				0, 4 )
	OP_ADDR( 0x1C, INC_R8,		E,				E,				0, 4 )
	OP_ADDR( 0x1D, DEC_R8,		E,				E,				0, 4 )
	OP_ADDR( 0x24, INC_R8,		H,				H,				0, 4 )
	OP_ADDR( 0x25, DEC_R8,		H,				H,				0, 4 )
	OP_ADDR( 0x27, DAA,			A,				A,				0, 4 )
	OP_ADDR( 0x2C, INC_R8,		L,				L,				0, 4 )
	OP_ADDR( 0x2D, DEC_R8,		L,				L,				0, 4 )
	OP_ADDR( 0x2F, CPL,			NONE,			NONE,			0, 4 )
	OP_ADDR( 0x34, INC_R8,		DIRECT_HL,		DIRECT_HL,		0, 12 )
	OP_ADDR( 0x35, DEC_R8,		DIRECT_HL,		DIRECT_HL,		0, 12 )
	OP_ADDR( 0x37, SCF,			NONE,			NONE,			0, 4 )
	OP_ADDR( 0x3C, INC_R8,		A,				A,				0, 4 )
	OP_ADDR( 0x3D, DEC_R8,		A,				A,				0, 4 )
	OP_ADDR( 0x3F, CCF,			NONE,			NONE,			0, 4 )
	OP_ADDR( 0x80, ADD,			NONE,			B,				0, 4 )
	OP_ADDR( 0x81, ADD,			NONE,			C,				0, 4 )
	OP_ADDR( 0x82, ADD,			NONE,			D,				0, 4 )
	OP_ADDR( 0x83, ADD,			NONE,			E,				0, 4 )
	OP_ADDR( 0x84, ADD,			NONE,			H,				0, 4 )
	OP_ADDR( 0x85, ADD,			NONE,			L,				0, 4 )
	OP_ADDR( 0x86, ADD,			NONE,			DIRECT_HL,		0, 8 )
	OP_ADDR( 0x87, ADD,			NONE,			A,				0, 4 )
	OP_ADDR( 0x88, ADC,			NONE,			B,				0, 4 )
	OP_ADDR( 0x89, ADC,			NONE,			C,				0, 4 )
	OP_ADDR( 0x8A, ADC,			NONE,			D,				0, 4 )
	OP_ADDR( 0x8B, ADC,			NONE,			E,				0, 4 )
	OP_ADDR( 0x8C, ADC,			NONE,			H,				0, 4 )
	OP_ADDR( 0x8D, ADC,			NONE,			L,				0, 4 )
	OP_ADDR( 0x8E, ADC,			NONE,			DIRECT_HL,		0, 8 )
	OP_ADDR( 0x8F, ADC,			NONE,			A,				0, 4 )
	OP_ADDR( 0x90, SUB,			NONE,			B,				0, 4 )
	OP_ADDR( 0x91, SUB,			NONE,			C,				0, 4 )
	OP_ADDR( 0x92, SUB,			NONE,			D,				0, 4 )
	OP_ADDR( 0x93, SUB,			NONE,			E,				0, 4 )
	OP_ADDR( 0x94, SUB,			NONE,			H,				0, 4 )
	OP_ADDR( 0x95, SUB,			NONE,			L,				0, 4 )
	OP_ADDR( 0x96, SUB,			NONE,			DIRECT_HL,		0, 8 )
	OP_ADDR( 0x97, SUB,			NONE,			A,				0, 4 )
	OP_ADDR( 0x98, SBC,			NONE,			B,				0, 4 )
	OP_ADDR( 0x99, SBC,			NONE,			C,				0, 4 )
	OP_ADDR( 0x9A, SBC,			NONE,			D,				0, 4 )
	OP_ADDR( 0x9B, SBC,			NONE,			E,				0, 4 )
	OP_ADDR( 0x9C, SBC,			NONE,			H,				0, 4 )
	OP_ADDR( 0x9D, SBC,			NONE,			L,				0, 4 )
	OP_ADDR( 0x9E, SBC,			NONE,			DIRECT_HL,		0, 8 )
	OP_ADDR( 0x9F, SBC,			NONE,			A,				0, 4 )
	OP_ADDR( 0xA0, AND,			NONE,			B,				0, 4 )
	OP_ADDR( 0xA1, AND,			NONE,			C,				0, 4 )
	OP_ADDR( 0xA2, AND,			NONE,			D,				0, 4 )
	OP_ADDR( 0xA3, AND,			NONE,			E,				0, 4 )
	OP_ADDR( 0xA4, AND,			NONE,			H,				0, 4 )
	OP_ADDR( 0xA5, AND,			NONE,			L,				0, 4 )
	OP_ADDR( 0xA6, AND,			NONE,			DIRECT_HL,		0, 8 )
	OP_ADDR( 0xA7, AND,			NONE,			A,				0, 4 )
	OP_ADDR( 0xA8, XOR,			NONE,			B,				0, 4 )
	OP_ADDR( 0xA9, XOR,			NONE,			C,				0, 4 )
	OP_ADDR( 0xAA, XOR,			NONE,			D,				0, 4 )
	OP_ADDR( 0xAB, XOR,			NONE,			E,				0, 4 )
	OP_ADDR( 0xAC, XOR,			NONE,			H,				0, 4 )
	OP_ADDR( 0xAD, XOR,			NONE,			L,				0, 4 )
	OP_ADDR( 0xAE, XOR,			NONE,			DIRECT_HL,		0, 8 )
	OP_ADDR( 0xAF, XOR,			NONE,			A,				0, 4 )
	OP_ADDR( 0xB0, OR,			NONE,			B,				0, 4 )
	OP_ADDR( 0xB1, OR,			NONE,			C,				0, 4 )
	OP_ADDR( 0xB2, OR,			NONE,			D,				0, 4 )
	OP_ADDR( 0xB3, OR,			NONE,			E,				0, 4 )
	OP_ADDR( 0xB4, OR,			NONE,			H,				0, 4 )
	OP_ADDR( 0xB5, OR,			NONE,			L,				0, 4 )
	OP_ADDR( 0xB6, OR,			NONE,			DIRECT_HL,		0, 8 )
	OP_ADDR( 0xB7, OR,			NONE,			A,				0, 4 )
	OP_ADDR( 0xB8, CP,			NONE,			B,				0, 4 )
	OP_ADDR( 0xB9, CP,			NONE,			C,				0, 4 )
	OP_ADDR( 0xBA, CP,			NONE,			D,				0, 4 )
	OP_ADDR( 0xBB, CP,			NONE,			E,				0, 4 )
	OP_ADDR( 0xBC, CP,			NONE,			H,				0, 4 )
	OP_ADDR( 0xBD, CP,			NONE,			L,				0, 4 )
	OP_ADDR( 0xBE, CP,			NONE,			DIRECT_HL,		0, 8 )
	OP_ADDR( 0xBF, CP,			NONE,			A,				0, 4 )
	OP_ADDR( 0xC6, AND,			NONE,			IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0xCE, ADC,			NONE,			IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0xD6, SUB,			NONE,			IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0xDE, SBC,			NONE,			IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0xE6, AND,			NONE,			IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0xEE, XOR,			NONE,			IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0xF6, OR,			NONE,			IMMEDIATE_N8,	1, 8 )
	OP_ADDR( 0xFE, CP,			NONE,			IMMEDIATE_N8,	1, 8 )

	// 16bit ALU instructions
	OP_ADDR( 0x03, INC_R16,		BC,				BC,				0, 8 )		
	OP_ADDR( 0x09, ADD_HL,		NONE,			BC,				0, 8 )
	OP_ADDR( 0x0B, DEC_R16,		BC,				BC,				0, 8 )		
	OP_ADDR( 0x13, INC_R16,		DE,				DE,				0, 8 )
	OP_ADDR( 0x19, ADD_HL,		NONE,			DE,				0, 8 )
	OP_ADDR( 0x1B, DEC_R16,		DE,				DE,				0, 8 )
	OP_ADDR( 0x23, INC_R16,		HL,				HL,				0, 8 )
	OP_ADDR( 0x29, ADD_HL,		NONE,			HL,				0, 8 )
	OP_ADDR( 0x2B, DEC_R16,		HL,				HL,				0, 8 )
	OP_ADDR( 0x33, INC_R16,		SP,				SP,				0, 8 )
	OP_ADDR( 0x39, ADD_HL,		NONE,			SP,				0, 8 )
	OP_ADDR( 0x3B, DEC_R16,		SP,				SP,				0, 4 )
	OP_ADDR( 0xE8, ADD_SP,		NONE,			IMMEDIATE_N8,	1, 12 )

	// 8bit rotations/shift instructions
	OP_ADDR( 0x07, RLCA,		A,				A,				0, 4 )
	OP_ADDR( 0x0F, RRCA,		A,				A,				0, 4 )
	OP_ADDR( 0x17, RLA,			A,				A,				0, 4 )
	OP_ADDR( 0x1F, RRA,			A,				A,				0, 4 )

	// Bit manipulations
	OP_BIT( 0x00, RLC,			B,			1, 8 )
	OP_BIT( 0x01, RLC,			C,			1, 8 )
	OP_BIT( 0x02, RLC,			D,			1, 8 )
	OP_BIT( 0x03, RLC,			E,			1, 8 )
	OP_BIT( 0x04, RLC,			H,			1, 8 )
	OP_BIT( 0x05, RLC,			L,			1, 8 )
	OP_BIT( 0x06, RLC,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x07, RLC,			A,			1, 8 )
	OP_BIT( 0x08, RRC,			B,			1, 8 )
	OP_BIT( 0x09, RRC,			C,			1, 8 )
	OP_BIT( 0x0A, RRC,			D,			1, 8 )
	OP_BIT( 0x0B, RRC,			E,			1, 8 )
	OP_BIT( 0x0C, RRC,			H,			1, 8 )
	OP_BIT( 0x0D, RRC,			L,			1, 8 )
	OP_BIT( 0x0E, RRC,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x0F, RRC,			A,			1, 8 )

	OP_BIT( 0x10, RL,			B,			1, 8 )
	OP_BIT( 0x11, RL,			C,			1, 8 )
	OP_BIT( 0x12, RL,			D,			1, 8 )
	OP_BIT( 0x13, RL,			E,			1, 8 )
	OP_BIT( 0x14, RL,			H,			1, 8 )
	OP_BIT( 0x15, RL,			L,			1, 8 )
	OP_BIT( 0x16, RL,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x17, RL,			A,			1, 8 )
	OP_BIT( 0x18, RR,			B,			1, 8 )
	OP_BIT( 0x19, RR,			C,			1, 8 )
	OP_BIT( 0x1A, RR,			D,			1, 8 )
	OP_BIT( 0x1B, RR,			E,			1, 8 )
	OP_BIT( 0x1C, RR,			H,			1, 8 )
	OP_BIT( 0x1D, RR,			L,			1, 8 )
	OP_BIT( 0x1E, RR,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x1F, RR,			A,			1, 8 )

	OP_BIT( 0x20, SLA,			B,			1, 8 )
	OP_BIT( 0x21, SLA,			C,			1, 8 )
	OP_BIT( 0x22, SLA,			D,			1, 8 )
	OP_BIT( 0x23, SLA,			E,			1, 8 )
	OP_BIT( 0x24, SLA,			H,			1, 8 )
	OP_BIT( 0x25, SLA,			L,			1, 8 )
	OP_BIT( 0x26, SLA,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x27, SLA,			A,			1, 8 )
	OP_BIT( 0x28, SRA,			B,			1, 8 )
	OP_BIT( 0x29, SRA,			C,			1, 8 )
	OP_BIT( 0x2A, SRA,			D,			1, 8 )
	OP_BIT( 0x2B, SRA,			E,			1, 8 )
	OP_BIT( 0x2C, SRA,			H,			1, 8 )
	OP_BIT( 0x2D, SRA,			L,			1, 8 )
	OP_BIT( 0x2E, SRA,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x2F, SRA,			A,			1, 8 )

	OP_BIT( 0x30, SWAP,			B,			1, 8 )
	OP_BIT( 0x31, SWAP,			C,			1, 8 )
	OP_BIT( 0x32, SWAP,			D,			1, 8 )
	OP_BIT( 0x33, SWAP,			E,			1, 8 )
	OP_BIT( 0x34, SWAP,			H,			1, 8 )
	OP_BIT( 0x35, SWAP,			L,			1, 8 )
	OP_BIT( 0x36, SWAP,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x37, SWAP,			A,			1, 8 )
	OP_BIT( 0x38, SRL,			B,			1, 8 )
	OP_BIT( 0x39, SRL,			C,			1, 8 )
	OP_BIT( 0x3A, SRL,			D,			1, 8 )
	OP_BIT( 0x3B, SRL,			E,			1, 8 )
	OP_BIT( 0x3C, SRL,			H,			1, 8 )
	OP_BIT( 0x3D, SRL,			L,			1, 8 )
	OP_BIT( 0x3E, SRL,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x3F, SRL,			A,			1, 8 )

	OP_BIT( 0x40, BIT,			B,			1, 8 )
	OP_BIT( 0x41, BIT,			C,			1, 8 )
	OP_BIT( 0x42, BIT,			D,			1, 8 )
	OP_BIT( 0x43, BIT,			E,			1, 8 )
	OP_BIT( 0x44, BIT,			H,			1, 8 )
	OP_BIT( 0x45, BIT,			L,			1, 8 )
	OP_BIT( 0x46, BIT,			DIRECT_HL,	1, 12 )
	OP_BIT( 0x47, BIT,			A,			1, 8 )
	OP_BIT( 0x48, BIT,			B,			1, 8 )
	OP_BIT( 0x49, BIT,			C,			1, 8 )
	OP_BIT( 0x4A, BIT,			D,			1, 8 )
	OP_BIT( 0x4B, BIT,			E,			1, 8 )
	OP_BIT( 0x4C, BIT,			H,			1, 8 )
	OP_BIT( 0x4D, BIT,			L,			1, 8 )
	OP_BIT( 0x4E, BIT,			DIRECT_HL,	1, 12 )
	OP_BIT( 0x4F, BIT,			A,			1, 8 )

	OP_BIT( 0x50, BIT,			B,			1, 8 )
	OP_BIT( 0x51, BIT,			C,			1, 8 )
	OP_BIT( 0x52, BIT,			D,			1, 8 )
	OP_BIT( 0x53, BIT,			E,			1, 8 )
	OP_BIT( 0x54, BIT,			H,			1, 8 )
	OP_BIT( 0x55, BIT,			L,			1, 8 )
	OP_BIT( 0x56, BIT,			DIRECT_HL,	1, 12 )
	OP_BIT( 0x57, BIT,			A,			1, 8 )
	OP_BIT( 0x58, BIT,			B,			1, 8 )
	OP_BIT( 0x59, BIT,			C,			1, 8 )
	OP_BIT( 0x5A, BIT,			D,			1, 8 )
	OP_BIT( 0x5B, BIT,			E,			1, 8 )
	OP_BIT( 0x5C, BIT,			H,			1, 8 )
	OP_BIT( 0x5D, BIT,			L,			1, 8 )
	OP_BIT( 0x5E, BIT,			DIRECT_HL,	1, 12 )
	OP_BIT( 0x5F, BIT,			A,			1, 8 )

	OP_BIT( 0x60, BIT,			B,			1, 8 )
	OP_BIT( 0x61, BIT,			C,			1, 8 )
	OP_BIT( 0x62, BIT,			D,			1, 8 )
	OP_BIT( 0x63, BIT,			E,			1, 8 )
	OP_BIT( 0x64, BIT,			H,			1, 8 )
	OP_BIT( 0x65, BIT,			L,			1, 8 )
	OP_BIT( 0x66, BIT,			DIRECT_HL,	1, 12 )
	OP_BIT( 0x67, BIT,			A,			1, 8 )
	OP_BIT( 0x68, BIT,			B,			1, 8 )
	OP_BIT( 0x69, BIT,			C,			1, 8 )
	OP_BIT( 0x6A, BIT,			D,			1, 8 )
	OP_BIT( 0x6B, BIT,			E,			1, 8 )
	OP_BIT( 0x6C, BIT,			H,			1, 8 )
	OP_BIT( 0x6D, BIT,			L,			1, 8 )
	OP_BIT( 0x6E, BIT,			DIRECT_HL,	1, 12 )
	OP_BIT( 0x6F, BIT,			A,			1, 8 )

	OP_BIT( 0x70, BIT,			B,			1, 8 )
	OP_BIT( 0x71, BIT,			C,			1, 8 )
	OP_BIT( 0x72, BIT,			D,			1, 8 )
	OP_BIT( 0x73, BIT,			E,			1, 8 )
	OP_BIT( 0x74, BIT,			H,			1, 8 )
	OP_BIT( 0x75, BIT,			L,			1, 8 )
	OP_BIT( 0x76, BIT,			DIRECT_HL,	1, 12 )
	OP_BIT( 0x77, BIT,			A,			1, 8 )
	OP_BIT( 0x78, BIT,			B,			1, 8 )
	OP_BIT( 0x79, BIT,			C,			1, 8 )
	OP_BIT( 0x7A, BIT,			D,			1, 8 )
	OP_BIT( 0x7B, BIT,			E,			1, 8 )
	OP_BIT( 0x7C, BIT,			H,			1, 8 )
	OP_BIT( 0x7D, BIT,			L,			1, 8 )
	OP_BIT( 0x7E, BIT,			DIRECT_HL,	1, 12 )
	OP_BIT( 0x7F, BIT,			A,			1, 8 )

	OP_BIT( 0x80, RES,			B,			1, 8 )
	OP_BIT( 0x81, RES,			C,			1, 8 )
	OP_BIT( 0x82, RES,			D,			1, 8 )
	OP_BIT( 0x83, RES,			E,			1, 8 )
	OP_BIT( 0x84, RES,			H,			1, 8 )
	OP_BIT( 0x85, RES,			L,			1, 8 )
	OP_BIT( 0x86, RES,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x87, RES,			A,			1, 8 )
	OP_BIT( 0x88, RES,			B,			1, 8 )
	OP_BIT( 0x89, RES,			C,			1, 8 )
	OP_BIT( 0x8A, RES,			D,			1, 8 )
	OP_BIT( 0x8B, RES,			E,			1, 8 )
	OP_BIT( 0x8C, RES,			H,			1, 8 )
	OP_BIT( 0x8D, RES,			L,			1, 8 )
	OP_BIT( 0x8E, RES,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x8F, RES,			A,			1, 8 )

	OP_BIT( 0x90, RES,			B,			1, 8 )
	OP_BIT( 0x91, RES,			C,			1, 8 )
	OP_BIT( 0x92, RES,			D,			1, 8 )
	OP_BIT( 0x93, RES,			E,			1, 8 )
	OP_BIT( 0x94, RES,			H,			1, 8 )
	OP_BIT( 0x95, RES,			L,			1, 8 )
	OP_BIT( 0x96, RES,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x97, RES,			A,			1, 8 )
	OP_BIT( 0x98, RES,			B,			1, 8 )
	OP_BIT( 0x99, RES,			C,			1, 8 )
	OP_BIT( 0x9A, RES,			D,			1, 8 )
	OP_BIT( 0x9B, RES,			E,			1, 8 )
	OP_BIT( 0x9C, RES,			H,			1, 8 )
	OP_BIT( 0x9D, RES,			L,			1, 8 )
	OP_BIT( 0x9E, RES,			DIRECT_HL,	1, 16 )
	OP_BIT( 0x9F, RES,			A,			1, 8 )

	OP_BIT( 0xA0, RES,			B,			1, 8 )
	OP_BIT( 0xA1, RES,			C,			1, 8 )
	OP_BIT( 0xA2, RES,			D,			1, 8 )
	OP_BIT( 0xA3, RES,			E,			1, 8 )
	OP_BIT( 0xA4, RES,			H,			1, 8 )
	OP_BIT( 0xA5, RES,			L,			1, 8 )
	OP_BIT( 0xA6, RES,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xA7, RES,			A,			1, 8 )
	OP_BIT( 0xA8, RES,			B,			1, 8 )
	OP_BIT( 0xA9, RES,			C,			1, 8 )
	OP_BIT( 0xAA, RES,			D,			1, 8 )
	OP_BIT( 0xAB, RES,			E,			1, 8 )
	OP_BIT( 0xAC, RES,			H,			1, 8 )
	OP_BIT( 0xAD, RES,			L,			1, 8 )
	OP_BIT( 0xAE, RES,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xAF, RES,			A,			1, 8 )

	OP_BIT( 0xB0, RES,			B,			1, 8 )
	OP_BIT( 0xB1, RES,			C,			1, 8 )
	OP_BIT( 0xB2, RES,			D,			1, 8 )
	OP_BIT( 0xB3, RES,			E,			1, 8 )
	OP_BIT( 0xB4, RES,			H,			1, 8 )
	OP_BIT( 0xB5, RES,			L,			1, 8 )
	OP_BIT( 0xB6, RES,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xB7, RES,			A,			1, 8 )
	OP_BIT( 0xB8, RES,			B,			1, 8 )
	OP_BIT( 0xB9, RES,			C,			1, 8 )
	OP_BIT( 0xBA, RES,			D,			1, 8 )
	OP_BIT( 0xBB, RES,			E,			1, 8 )
	OP_BIT( 0xBC, RES,			H,			1, 8 )
	OP_BIT( 0xBD, RES,			L,			1, 8 )
	OP_BIT( 0xBE, RES,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xBF, RES,			A,			1, 8 )

	OP_BIT( 0xC0, SET,			B,			1, 8 )
	OP_BIT( 0xC1, SET,			C,			1, 8 )
	OP_BIT( 0xC2, SET,			D,			1, 8 )
	OP_BIT( 0xC3, SET,			E,			1, 8 )
	OP_BIT( 0xC4, SET,			H,			1, 8 )
	OP_BIT( 0xC5, SET,			L,			1, 8 )
	OP_BIT( 0xC6, SET,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xC7, SET,			A,			1, 8 )
	OP_BIT( 0xC8, SET,			B,			1, 8 )
	OP_BIT( 0xC9, SET,			C,			1, 8 )
	OP_BIT( 0xCA, SET,			D,			1, 8 )
	OP_BIT( 0xCB, SET,			E,			1, 8 )
	OP_BIT( 0xCC, SET,			H,			1, 8 )
	OP_BIT( 0xCD, SET,			L,			1, 8 )
	OP_BIT( 0xCE, SET,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xCF, SET,			A,			1, 8 )
	
	OP_BIT( 0xD0, SET,			B,			1, 8 )
	OP_BIT( 0xD1, SET,			C,			1, 8 )
	OP_BIT( 0xD2, SET,			D,			1, 8 )
	OP_BIT( 0xD3, SET,			E,			1, 8 )
	OP_BIT( 0xD4, SET,			H,			1, 8 )
	OP_BIT( 0xD5, SET,			L,			1, 8 )
	OP_BIT( 0xD6, SET,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xD7, SET,			A,			1, 8 )
	OP_BIT( 0xD8, SET,			B,			1, 8 )
	OP_BIT( 0xD9, SET,			C,			1, 8 )
	OP_BIT( 0xDA, SET,			D,			1, 8 )
	OP_BIT( 0xDB, SET,			E,			1, 8 )
	OP_BIT( 0xDC, SET,			H,			1, 8 )
	OP_BIT( 0xDD, SET,			L,			1, 8 )
	OP_BIT( 0xDE, SET,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xDF, SET,			A,			1, 8 )

	OP_BIT( 0xE0, SET,			B,			1, 8 )
	OP_BIT( 0xE1, SET,			C,			1, 8 )
	OP_BIT( 0xE2, SET,			D,			1, 8 )
	OP_BIT( 0xE3, SET,			E,			1, 8 )
	OP_BIT( 0xE4, SET,			H,			1, 8 )
	OP_BIT( 0xE5, SET,			L,			1, 8 )
	OP_BIT( 0xE6, SET,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xE7, SET,			A,			1, 8 )
	OP_BIT( 0xE8, SET,			B,			1, 8 )
	OP_BIT( 0xE9, SET,			C,			1, 8 )
	OP_BIT( 0xEA, SET,			D,			1, 8 )
	OP_BIT( 0xEB, SET,			E,			1, 8 )
	OP_BIT( 0xEC, SET,			H,			1, 8 )
	OP_BIT( 0xED, SET,			L,			1, 8 )
	OP_BIT( 0xEE, SET,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xEF, SET,			A,			1, 8 )

	OP_BIT( 0xF0, SET,			B,			1, 8 )
	OP_BIT( 0xF1, SET,			C,			1, 8 )
	OP_BIT( 0xF2, SET,			D,			1, 8 )
	OP_BIT( 0xF3, SET,			E,			1, 8 )
	OP_BIT( 0xF4, SET,			H,			1, 8 )
	OP_BIT( 0xF5, SET,			L,			1, 8 )
	OP_BIT( 0xF6, SET,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xF7, SET,			A,			1, 8 )
	OP_BIT( 0xF8, SET,			B,			1, 8 )
	OP_BIT( 0xF9, SET,			C,			1, 8 )
	OP_BIT( 0xFA, SET,			D,			1, 8 )
	OP_BIT( 0xFB, SET,			E,			1, 8 )
	OP_BIT( 0xFC, SET,			H,			1, 8 )
	OP_BIT( 0xFD, SET,			L,			1, 8 )
	OP_BIT( 0xFE, SET,			DIRECT_HL,	1, 16 )
	OP_BIT( 0xFF, SET,			A,			1, 8 )
}